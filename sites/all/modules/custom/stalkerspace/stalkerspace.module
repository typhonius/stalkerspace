<?php
/**
 * @file
 * Code for the Stalkerspace module.
 */

/**
 * Implements hook_menu
 */
function stalkerspace_menu() {
  $items = array();
  $items['admin/config/system/stalkerspace'] = array(
    'title' => 'Stalkerspace',
    'description' => 'Access administrative pages for Stalkerspace',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stalkerspace_admin_page'),
    'file' => 'stalkerspace.admin.inc',
    'access arguments' => array('administer stalkerspace'),
    'weight' => -10,
  );

  $items['all'] = array(
    'title' => 'All',
    'description' => 'All posts ordered by current popularity',
    'type' => MENU_CALLBACK,
    'page callback' => 'stalkerspace_all_content',
    'access arguments' => array('access content'),
  );

  return $items;
}

function stalkerspace_all_content() {
  // TODO we need to cache_set and cache_get here I think
  // Issue already exists to look into this.
  $nodequery = new StalkerspaceEntityFieldQuery();

  $result = $nodequery->fieldOrderBy('field_activity', 'radioactivity_energy', 'DESC')
    ->execute();
  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);
  $output = node_view_multiple($nodes, 'stalkerspace');

  return $output;
}

/**
 * Implements hook_node_view
 */
function stalkerspace_node_view($node, $view_mode) {
  $links = array();
  if ($node->comment != COMMENT_NODE_HIDDEN) {
    if ($view_mode != 'rss' && $view_mode != 'teaser' && $view_mode != 'search_index' && $view_mode != 'search_result') {
      if ($node->comment == COMMENT_NODE_OPEN) {
        $comment_form_location = variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW);
        if (user_access('post comments')) {
          if (user_access('access comments')) {
            $links['comment-add'] = array(
              'title' => t('Add new comment'),
              'attributes' => array('title' => t('Share your thoughts and opinions related to this posting.')),
              'href' => "node/$node->nid",
              'fragment' => 'comment-form',
            );
            if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE) {
              $links['comment-add']['href'] = "comment/reply/$node->nid";
            }
          }
        }
      }
      $node->content['links']['comment'] = array(
        '#theme' => 'links__node__comment',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_entity_info_alter
 */
function stalkerspace_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['stalkerspace'] = array(
    'label' => t('Stalkerspace View Mode'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_permissions
 */
function stalkerspace_permission() {
  return array(
    'administer stalkerspace' => array(
      'title' => t('Stalkerspace'),
      'description' => t('Allows administrative access to stalkerspace settings'),
    ),
  );
}

/**
 * Implements hook_init
 */
function stalkerspace_init() {
  $path_alias = drupal_get_path_alias();

  $include_pages = variable_get('ip_geoloc_include_pages', '*');
  if (drupal_match_path($path_alias, $include_pages)) {
    drupal_add_js(drupal_get_path('module', 'stalkerspace') . '/stalkerspace_geolocation.js', 'file');
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function stalkerspace_form_confession_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_set_title(t('Confess'), PASS_THROUGH);
  $query = drupal_get_query_parameters();
  if ($query['space']) {
    // They're radios right now so don't need to do array of default values
    $form['og_group_ref']['und'][0]['default']['#default_value'] = $query['space'];
    $form['og_group_ref']['#access'] = FALSE;
  }
  $form['stalkerspace'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Stalkerspace'),
  );
  unset($form['body']['und'][0]['#title']);
  $form['title']['#required'] = FALSE;
  $form['stalkerspace']['title'] = $form['title'];
  $form['stalkerspace']['#weight'] = $form['title']['#weight'] + 7;
  $form['title']['#access'] = FALSE;
  $form['group_content_access']['#access'] = user_access('bypass node access');
//  $form['#validate'][] = 'stalkerspace_confession_form_validate';
}

/**
 * Implements hook_node_validate
 */
function stalkerspace_node_validate($node, $form, &$form_state) {
// this doesn't work atm but we want to somehow allow the title to be overridden by the body OR
// by the title field which is now optional
  if ($node->type == 'confession') {
//    $form_state['values']['title'] = $form_state['input']['title'] ?: check_markup(truncate_utf8(strip_tags($form_state['input']['body']['und'][0]['value']), 30, TRUE, FALSE, 10), filter_fallback_format(), FALSE);

// TODO this NEEDS a review
    $form_state['values']['title'] = $form_state['input']['title'] ?: truncate_utf8(strip_tags($form_state['input']['body']['und'][0]['value']), 30, TRUE, FALSE, 10);

  }
}

/**
 * Implements hook_block_info
 */
function stalkerspace_block_info() {
  $blocks = array();
  $blocks['stalkerspace_create_content'] = array(
    'info' => t('Stalkerspace Create Content Links'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
    // Consider DRUPAL_CACHE_PER_PAGE
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function stalkerspace_block_view($delta = '') {
  $block = array();
  $context = og_context();
// Alter access to be only those users in the group (and admin?)
// Otherwise perhaps offer the ability to join the group

// TODO this NEEDS to have proper access permission
// Consider adding to group context OR altering the text to the sign up link (still group context)

  switch ($delta) {
    case 'stalkerspace_create_content':
      $block['subject'] = '';
      $block['content'] = l(t('Confess'), 'node/add/confession', array('html' => FALSE, 'query' => array('space' => $context['gid'])));
    break;
  }

  return $block;
}

/**
 * Implementation of hook_ctools_plugin_dierctory() to let the system
 * know we implement widget plugins.
 */
function stalkerspace_ctools_plugin_directory($module, $plugin) {
  if ($module == 'vud') {
    return $plugin;
  }
}

// Filter section
/**
 * Implementation of hook_filter_info().
 */
function stalkerspace_filter_info() {
  $filters = array(
    'stalkerspace_node_link' => array(
      'title' => t('Stalkerspace Node Link'),
      'description' => t('Insert automatically links to drupal nodes using [node_id] tags.'),
      'process callback' => 'stalkerspace_node_link_filter_link_node_process',
      'tips callback' => 'stalkerspace_node_link_filter_link_node_tips',
    ),
    'greentext' => array(
      'title' => t('Implying greentext'),
      'description' => t('Allows you to alter any lines input starting with \'>\' to appear as greentext.'),
      'process callback' => 'stalkerspace_greentext',
      'tips callback' => 'stalkerspace_greentext_tips',
    ),
  );

  return $filters;
}

/**
 * Implementation of hook_theme().
 */
function stalkerspace_theme() {
  return array(
    'stalkerspace_node_link_format' => array(
      'variables' => array('content' => NULL),
    ),
    'stalkerspace_greentext_format' => array(
      'template' => 'stalkerspace_greentext',
      'variables' => array('text' => NULL),
    ),
  );
}

/**
 * Actually execute filter on given text.
 */
function stalkerspace_node_link_filter_link_node_process($text, $filter, $format, $langcode, $cache, $cache_id) {
    $regexp = '/\[(\d+)([^\]]*)\]/i';
    if (preg_match_all($regexp, $text, $match)) {
      foreach ($match[1] as $key => $nid) {
        $node = node_load($nid);
        if($node) {
          // check here to see if user has permissions to access this node
          if(!node_access("view", $node)) {
            $matches_html[$key] = t('You do not have access to view this node');
            continue;
          }

          $matches_html[$key] = theme('stalkerspace_node_link_format', array('node' => $node));
        }
        else {
          $output = theme("stalkerspace_node_link_format", array('content' => t("Nonexistent confession: ") . "$nid."));
          drupal_set_message($output, 'warning');
          $matches_html[$key] = $output;
        }
      }

      foreach ($match[1] as $key => $value) {
        $mtch[] = $match[0][$key];
        $repl[] = $matches_html[$key];
      }
      $text = str_replace($mtch, $repl, $text);
    }

  return $text;
}

function stalkerspace_greentext($text, $filter) {
  // dpm($text);
  $lines = explode("\n", $text);
  foreach ($lines as $index => $line) {
    if (preg_match('/^>/', strip_tags($line), $matches) || preg_match('/^&gt;/', strip_tags($line), $matches)) {
      $lines[$index] = theme('stalkerspace_greentext_format', array('text' => $line));
    }
  }
  $text = implode("\n", $lines);

  return $text;
}

function stalkerspace_node_link_filter_link_node_tips() {
  return t('You can link to other confessions by entering their confession id in square brackets:<br>
  [<em>confession id</em>]<br>');
}

function stalkerspace_greentext_tips($filter, $format, $long = FALSE) {
  return t('Lines beginning with \'>\' will automatically be replaced with greentext');
}

function theme_stalkerspace_node_link_format($variables) {
  $node = $variables['node'];
  $output = l($node->title, "node/" . $node->nid, array('class' => 'linked-confession'));
  return $output;
}

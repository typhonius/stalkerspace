<?php

class UserRestrictionsTestCase extends DrupalWebTestCase {
  protected function addMask($mask, $type, $status = 0) {
    db_query(
      "INSERT INTO {user_restrictions} (mask, type, status) VALUES ('%s', %d, %d)",
      $mask, $type, $status
    );
  }

  public static function getInfo() {
    return array(
      'name' => 'User restrictions',
      'description' => 'Assure that negative and positive access rules behave as designed.',
      'group' => 'User restrictions',
    );
  }

  function setUp() {
    parent::setUp('user_restrictions');
  }

  function testAccess() {
    // To avoid conflicts with non allowed account creations.
    variable_set('user_register', 1);

    $this->addMask('simpletest_block%', 'name');
    $this->addMask('simpletest_block_allow%', 'name', 1);

    // First try the blocked user.
    $name = 'simpletest_block_' . $this->randomName(6);
    $mail = "$name@example.com";
    $edit = array('name' => $name, 'mail' => $mail);

    $this->drupalPost('user/register', $edit, t('Create new account'));

    $this->assertText(
      t('The name %name is a reserved username, and cannot be used.', array('@name' => $name)),
      t('The user @name has been blocked.', array('@name' => $name))
    );

    // Now try the allowed user.
    $name = 'simpletest_block_allow_' . $this->randomName(6);
    $mail = "$name@example.com";
    $edit = array('name' => $name, 'mail' => $mail);

    $this->drupalPost('user/register', $edit, t('Create new account'));

    $this->assertNoText(
      t('The name %name is a reserved username, and cannot be used.', array('@name' => $name)),
      t('The user @name has been blocked.', array('@name' => $name))
    );

    $user = user_load($edit);

    $this->assertTrue(isset($user->uid), t('user->uid is set.'));
    $this->assertTrue($user->uid > 0, t('The user ID is greater than zero.'));
  }
}
